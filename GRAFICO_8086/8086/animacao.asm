.MODEL	SMALL
; I/O Address Bus decode - every device gets 0x200 addresses */
; INICIO DO MAPEAMENTO DAS REGIOES DE MEMORIAS USADAS COMO I/O (INPUT/OUTPUT) DE DADOS PARA OS PERIFERICOS
IO0  EQU  0000H
IO1  EQU  0200H
IO2  EQU  0400H
IO3  EQU  0600H
IO4  EQU  0800H ;8255
IO5  EQU  0A00H
IO6  EQU  0C00H
IO7  EQU  0E00H
IO8  EQU  1000H
IO9  EQU  1200H
IO10 EQU  1400H
IO11 EQU  1600H
IO12 EQU  1800H
IO13 EQU  1A00H
IO14 EQU  1C00H
IO15 EQU  1E00H

ADR_PPI_PORTA	EQU  (IO4)
ADR_PPI_PORTB	EQU  (IO4 + 02h)
ADR_PPI_PORTC	EQU  (IO4 + 04h)
ADR_PPI_CONTROL	EQU  (IO4 + 06h)

PPI_PORTA_INP	EQU  10h
PPI_PORTA_OUT	EQU  00h
PPI_PORTB_INP	EQU  02h
PPI_PORTB_OUT	EQU  00h
PPI_PORTCL_INP	EQU  01h
PPI_PORTCL_OUT	EQU  00h
PPI_PORTCH_INP	EQU  08h
PPI_PORTCH_OUT	EQU  00h
PPI_MODE_BCL_0	EQU  00h
PPI_MODE_BCL_1	EQU  04h
PPI_MODE_ACH_0	EQU  00h
PPI_MODE_ACH_1	EQU  20h
PPI_MODE_ACH_2	EQU  40h
PPI_ACTIVE	EQU  80h

; MAPEAMENTO DAS REGIOES DE MEMORIAS USADAS PARA O CONTROLE DA COMUNICAÇÃO USART/SERIAL
ADR_TIMER_DATA0   EQU  (IO3 + 00H)
ADR_TIMER_DATA1   EQU  (IO3 + 02H)
ADR_TIMER_DATA2   EQU  (IO3 + 04H)
ADR_TIMER_CONTROL EQU  (IO3 + 06H)

; MACRO QUE TEM COMO RESPONSABILIDADE INICIALIZAR O BEEP USADO PELO DESPERTADOR
MACRO_INICIALIZA_8253_TIMER0 MACRO HIGH,LOW
   PUSHF
   PUSH AX
   PUSH DX
   
   MOV AL,36H
   MOV DX, ADR_TIMER_CONTROL
   OUT DX,AL

   MOV AL,LOW
   MOV DX, ADR_TIMER_DATA0
   OUT DX,AL

   MOV AL,HIGH
   MOV DX, ADR_TIMER_DATA0
   OUT DX,AL
   
   POP DX
   POP AX
   POPF
ENDM

; 8251A USART RESOURCES
ADR_USART_DATA EQU  (IO2 + 00H) ;ONDE VOCE VAI MANDAR E RECEBER DADOS DO 8251
ADR_USART_CMD  EQU  (IO2 + 02H) ;É O LOCAL ONDE VOCE VAI ESCREVER PARA PROGRAMAR O 8251
ADR_USART_STAT EQU  (IO2 + 02H)  ;RETORNA O STATUS SE UM CARACTER FOI DIGITADO

;CODIFICACAO NECESSARIAS PARA EXIBIÇÃO DOS VALORES CONTABILIZADOS NO RELOGIO E QUE SERÃO ENVIADOS PARA O TERMINAL
ZERO = 10111111B 
ONE = 10000110B 
TWO = 11011011B 
THREE = 11001111B 
FOUR = 11100110B 
FIVE = 11101101B 
SIX = 11111101B 
SEVEN = 10000111B 
EIGHT = 11111111B 
NINE = 11101111B  

.8086
.code

	ORG 0008H
	PONTEIRO_TRATADOR_INTERRUPCAO DB 4 DUP("J") ; NMI ; PONTEIRO PARA INTERRUPCAO
	;APONTA PARA UMA ROTINA CHAMADA A CADA 1 SEGUNDO VIA HARDWARE INTERRUPT
	;OBSERVE NO 8086 O PINO NMI, ELE ESTA RECEBENDO UM PULSO A CADA UM SEGUNDO, FORÇANDO A INTERRUPÇÃO

	ORG 0400H ;RESERVADO PARA VETOR DE INTERRUPCOES

;LIGA DISPLAY
GLCD_ON:
   CALL GLCD_CS1_LOW
   CALL GLCD_CS2_LOW
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   MOV AL,03FH
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   RET   

;------------------------------------
;POSICIONA "CURSOR" NA COLUNA
GLCD_GOTO_COL:
   PUSHF
   PUSH AX

   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   CMP AH,64
   JL LEFT
   
   CALL GLCD_CS2_LOW
   CALL GLCD_CS1_HIGH
   SUB AH,64
   MOV COL_DATA,AH
   JMP SAI_GOTO_COL
   
LEFT:
    CALL GLCD_CS1_LOW
    CALL GLCD_CS2_HIGH
    MOV COL_DATA,AH

SAI_GOTO_COL:
   OR COL_DATA, 40H
   AND COL_DATA, 7FH
   MOV AL,COL_DATA
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   POP AX
   POPF
   RET
;------------------------------------

;------------------------------------
;POSICIONA "CURSOR" NA COLUNA
GLCD_GOTO_COL_TEXT:
   PUSHF
   PUSH AX
   PUSH BX

   PUSH AX
   MOV BL,8
   MOV AL,AH
   MUL BL
   MOV BL,AL
   POP AX
   MOV AH,BL
  
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   CMP AH,64
   JL LEFT_TEXT
   
   CALL GLCD_CS2_LOW
   CALL GLCD_CS1_HIGH
   SUB AH,64
   MOV COL_DATA,AH
   JMP SAI_GOTO_COL_TEXT
   
LEFT_TEXT:
    CALL GLCD_CS1_LOW
    CALL GLCD_CS2_HIGH
    MOV COL_DATA,AH

SAI_GOTO_COL_TEXT:
   OR COL_DATA, 40H
   AND COL_DATA, 7FH
   MOV AL,COL_DATA
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   POP BX
   POP AX
   POPF
   RET
;------------------------------------
   
;------------------------------------
;POSICIONA "CURSOR" NA LINHA
GLCD_GOTO_ROW:
   PUSH AX
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   OR AL,0B8H
   AND AL,0BFH
   MOV COL_DATA,AL
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   POP AX
   RET
;------------------------------------

;------------------------------------
;POSICIONA "CURSOR" NA LINHA
GLCD_GOTO_ROW_TEXT:
   PUSH AX
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   OR AL,0B8H
   AND AL,0BFH
   MOV COL_DATA,AL
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   POP AX
   RET
;------------------------------------


;------------------------------------   
; AH LINHA E  AL COLUNA
; POSICIONAMENTO DO "CURSOR" EM LINHA X COLUNA
; MODO GRAFICO (128x64)
GLCD_GOTO_XY:
   CALL GLCD_GOTO_COL
   CALL GLCD_GOTO_ROW
   RET
;;------------------------------------   

;------------------------------------   
; AH LINHA E  AL COLUNA
; POSICIONAMENTO DO "CURSOR" EM LINHA X COLUNA
; COLUNAS 16 (0..15), LINHAS 8 (0..7)
GLCD_GOTO_XY_TEXT:
   CALL GLCD_GOTO_COL_TEXT
   CALL GLCD_GOTO_ROW_TEXT
   RET
;------------------------------------   

; AL = DATA
GLCD_WRITE:
   CALL GLCD_RS_HIGH
   CALL GLCD_RW_LOW
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   RET
   
;AL = DATA  
GLCD_CLRLN:   
   PUSHF
   PUSH AX
   PUSH CX
   MOV AH,0
   CALL GLCD_GOTO_XY
   MOV AH,64
   CALL GLCD_GOTO_XY
   CALL GLCD_CS1_LOW
   MOV AL,0
   MOV CX,64
ESCREVA:   
   CALL GLCD_WRITE
   LOOP ESCREVA
   POP CX
   POP AX
   POPF
   RET

;---------------------------------------------------------
;APAGA DISPLAY GRAFICO
GLCD_CLR:
   PUSHF
   PUSH AX
   MOV AL,0
CLRLN:   
   CALL GLCD_CLRLN
   ADD AL,1
   CMP AL,8
   JNE CLRLN
   POP AX
   POPF
   RET
;---------------------------------------------------------

;---------------------------------------------------------
;DESENHA UM PONTO NESTAS COORDENADAS
;AH, AL, BH
;COLUNAS MODO GRAFICO = 128 (0..127) AH
;LINHAS MODO GRAFICO = 64 (0..63) AL
;BH = 0 PIXEL APAGADO, BH=1 PIXEL ACESO
GLCD_DRAW_POINT:
    PUSHF
    PUSH AX
    PUSH BX
    PUSH CX

    PUSH AX ; SALVA AH, AL
    PUSH AX ; SALVA AH, AL
    
    MOV CH,AH ; SALVA AH
    MOV AH,0

    MOV BL,8
    DIV BL
    
    MOV AH,CH
    CALL GLCD_GOTO_XY
    
    POP AX  ; RESTAURA AH, AL
    
    CMP BH,0
    JE LIGHT_SPOT
    
    MOV AH,0
    MOV BH,8
    DIV BH
    ; AH RESTO
    MOV CL,AH
    MOV AL,1
    SHL AL,CL
    MOV COL_DATA_AUX,AL
    
    MOV AH,CH
    CALL GLCD_READ_DATA
    OR COL_DATA_AUX,AL

    JMP SAI_GLCD_DRAW_POINT
    
LIGHT_SPOT:
    MOV AH,0
    MOV BH,8
    DIV BH
    ; AH RESTO
    MOV CL,AH
    MOV AL,1
    SHL AL,CL
    NOT AL
    MOV COL_DATA_AUX,AL

    MOV AH,CH
    CALL GLCD_READ_DATA
    AND COL_DATA_AUX,AL

SAI_GLCD_DRAW_POINT:
    POP AX

    MOV CH,AH ; SALVA AH
    MOV AH,0

    MOV BL,8
    DIV BL
    
    MOV AH,CH
    CALL GLCD_GOTO_XY
   
    MOV AL, COL_DATA_AUX
    CALL GLCD_WRITE
   
    POP CX
    POP BX
    POP AX
    POPF
    RET 
;---------------------------------------------------------

;---------------------------------------------------------
;LE STATUS DO DISPLAY
GLCD_READ_DATA:
    CALL INICIALIZA_8255_PORT_INPUT
    CALL GLCD_RW_HIGH
    CALL GLCD_RS_HIGH
    CMP AH,63
    JG  HAB_CS2

HAB_CS1:
    CALL GLCD_CS2_HIGH
    CALL GLCD_CS1_LOW
    JMP HAB

HAB_CS2:
    CALL GLCD_CS2_LOW
    CALL GLCD_CS1_HIGH

HAB:
     CALL GLCD_EN_HIGH
     CALL GLCD_EN_LOW
     CALL GLCD_EN_HIGH
     CALL LE_PORT_B
     MOV READ_DATA,AL
     CALL GLCD_EN_LOW
     CALL INICIALIZA_8255_PORTB_OUTPUT
     RET
;---------------------------------------------------------

;---------------------------------------------------------
; AL = INDICE CARACTER FONT (COMECA EM 0)
; IMPRIME CARACTER NA LINHA E COLUNA DEFINIDA
PRINT_CAR:
	PUSHF
	PUSH AX
	PUSH BX
	PUSH CX
	MOV BL,5
	MUL BL
	MOV BX,AX
	MOV CX,5
PRINTING_CAR:
	MOV AL,FONTS[BX]
        CALL GLCD_WRITE
        INC BX
	LOOP PRINTING_CAR
	POP CX
	POP BX
	POP AX
	POPF
	RET
	
;---------------------------------------------------------
; AH = COLUNA, AL=LINHA
; PRIMEIRO BYTE DO VETOR É NUMERO DE LINHAS E COLUNAS OCUPADAS
; EXEMPLO, IMAGEM DE 24X24 PIXELS = 3 LINHAS X 3 COLUNAS
PRINT_ICON:
	PUSHF
	PUSH AX
	PUSH CX
	MOV CL,  DS:[SI]  
	MOV QNT_COLUNAS, CL ; QNT COLUNAS IMPRESSAS
	MOV SALVA_QNT_COLUNAS, CL ; GUARDA QNT PARA NOVO LACO QNT COLUNAS IMPRESSAS
	MOV POS_COLUNAS, AH ; COLUNA PASSADA COMO PARAMETRO
	MOV CL,  DS:[SI+1]
	MOV LINHA, CL ;LINHA
	ADD SI,2    ; APONTA PARA ICONE...
PRINT:
	MOV CX,8
	CALL GLCD_GOTO_XY_TEXT	
PRINTING_ICON:
        PUSH AX
	MOV AL,DS:[SI]
        CALL GLCD_WRITE
	POP  AX
        INC SI
	LOOP PRINTING_ICON
	INC AH
	DEC QNT_COLUNAS
	JNE PRINT	
	MOV AH,SALVA_QNT_COLUNAS
	MOV QNT_COLUNAS,AH
	MOV AH,POS_COLUNAS
	INC AL
	DEC LINHA
	JNE PRINT	
	POP CX
	POP AX
	POPF
	RET

;---------------------------------------------------------
;ESTA ROTINA IMPRIME O GRAFICO APONTADO POR SI
PLOT_BMP:
	PUSHF
	PUSH AX
	PUSH SI
	MOV AL,0
	MOV AH,0
PLOT:
	CALL GLCD_GOTO_XY
	PUSH AX
	MOV AL,[SI]
	CALL GLCD_WRITE
	POP AX
	INC SI
	INC AH
	CMP AH,127
	JNE PLOT
	MOV AH,0
	INC AL
	CMP AL,8
	JNE PLOT
	POP SI
	POP AX
	POPF 
	RET
;---------------------------------------------------------

;---------------------------------------------------------
;ATIVA O GLCD
GLCD_ATIVA:
	CALL GLCD_CS1_HIGH
	CALL GLCD_CS2_HIGH
	CALL GLCD_RST_HIGH
	CALL GLCD_ON
	RET
;---------------------------------------------------------

;---------------------------------------------------------
;ESTAS ROTINAS APENAS GERAM PULSOS PARA O DISPLAY GRAFICO
GLCD_CS1_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 32
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_CS1_LOW:
   PUSHF
   PUSH AX
   MOV AL, 32
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_CS2_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 16
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_CS2_LOW:
   PUSHF
   PUSH AX
   MOV AL, 16
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RST_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 1
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RST_LOW:
   PUSHF
   PUSH AX
   MOV AL, 1
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_EN_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 2
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_EN_LOW:
   PUSHF
   PUSH AX
   MOV AL, 2
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RW_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 4
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET
   
GLCD_RW_LOW:
   PUSHF
   PUSH AX
   MOV AL, 4
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RS_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 8
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RS_LOW:
   PUSHF
   PUSH AX
   MOV AL, 8
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET
   
ENABLE_PULSE:
   CALL GLCD_EN_HIGH
   CALL GLCD_EN_LOW
   RET
   
;---------------------------------------------------------
;ROTINAS PARA 8255   
INICIALIZA_8255_PORTB_OUTPUT:
   PUSHF
   PUSH AX
   PUSH DX
   MOV DX, ADR_PPI_CONTROL
   MOV AL,0
   OR AL,PPI_PORTA_OUT
   OR AL,PPI_PORTB_OUT  
   OR AL,PPI_PORTCL_INP
   OR AL,PPI_PORTCH_INP
   OR AL,PPI_MODE_BCL_0
   OR AL,PPI_MODE_ACH_0
   OR AL,PPI_ACTIVE
   OUT DX,AL
   POP DX
   POP AX
   POPF
   RET

INICIALIZA_8255_PORT_INPUT:
   PUSHF
   PUSH AX
   PUSH DX
   MOV DX, ADR_PPI_CONTROL
   MOV AL,0
   OR AL,PPI_PORTA_OUT
   OR AL,PPI_PORTB_INP
   OR AL,PPI_PORTCL_INP
   OR AL,PPI_PORTCH_INP
   OR AL,PPI_MODE_BCL_0
   OR AL,PPI_MODE_ACH_0
   OR AL,PPI_ACTIVE
   OUT DX,AL
   POP DX
   POP AX
   POPF
   RET

MANDA_PORT_A:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTA
    OUT DX,AL
    POP DX
    POPF
    RET

MANDA_PORT_B:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTB
    OUT DX,AL
    POP DX
    POPF
    RET

LE_PORT_B:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTB
    IN AL,DX
    POP DX
    POPF
    RET

LE_PORT_C:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTC
    IN AL,DX
    POP DX
    POPF
    RET
;---------------------------------------------------------
     
.startup
	MOV AX,0000
	MOV DS,AX
	
	; TRIGGER DE DISPARO PARA A INTERRUPCAO QUE OCORRERA A CADA 1 SEGUNDO
	MOV WORD PTR PONTEIRO_TRATADOR_INTERRUPCAO, OFFSET INTERRUPT_ONE_SECOND
	MOV WORD PTR PONTEIRO_TRATADOR_INTERRUPCAO + 2, SEG INTERRUPT_ONE_SECOND 

	MOV AX,@DATA
	MOV DS,AX
	MOV AX,@STACK
	MOV SS,AX

	CALL INICIALIZA_8255_PORTB_OUTPUT
	
	CALL INICIALIZA_8251

	CALL GLCD_ATIVA
	
	;APAGA DISPLAY
	CALL GLCD_CLR
	
	CALL ZERA
	
	JMP DESPERTADOR

LOOP_INI: JMP LOOP_INI	
	
;---------------------------------------------------------

DEMO:

;APAGA DISPLAY
	CALL GLCD_CLR

;POSICIONA CURSOR COLUNA 0, LINHA 0 
;IMPRIME LETRA "A"	
	;MOV AH,7 ;COLUNA
	;MOV AL,0 ;LINHA
        ;CALL GLCD_GOTO_XY_TEXT
	;MOV AL,"A"
	;CALL PRINT_CAR

;POSICIONA CURSOR COLUNA 15, LINHA 1
;IMPRIME LETRA "B"		
	;MOV AH,15 ;COLUNA
	;MOV AL,1  ;LINHA
        ;CALL GLCD_GOTO_XY_TEXT
	;MOV AL,"B"
	;CALL PRINT_CAR
	
;POSICIONA CURSOR COLUNA 7, LINHA 7
;IMPRIME LETRA "C"		
	;MOV AH,15 ;COLUNA
	;MOV AL,7  ;LINHA
        ;CALL GLCD_GOTO_XY_TEXT
	;MOV AL,"C"
	;CALL PRINT_CAR
	
;sprite 24x24 bits
;AH = LINHA, COLUNA = AL
        ;LEA SI, BOOK
	;MOV AH,10 ;COLUNA
	;MOV AL,3  ;LINHA
        ;CALL PRINT_ICON
	
;sprite 24x24 bits
;AH = LINHA, COLUNA = AL
        ;LEA SI, BOOK_OPEN
	;MOV AH,0 ;COLUNA
	;MOV AL,0  ;LINHA
        ;CALL PRINT_ICON


;sprite 32x32 bits
;AH = LINHA, COLUNA = AL
        ;LEA SI, GUY
	;MOV AH,5 ;COLUNA
	;MOV AL,4  ;LINHA
        ;CALL PRINT_ICON
		
	LEA SI, SINO
	MOV AH,9 ;COLUNA
	MOV AL,6  ;LINHA
	CALL PRINT_ICON

	MOV AH,11 ;COLUNA
	MOV AL,7 ;LINHA
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"0"
	CALL PRINT_CAR
	 
	MOV AH,12 ;COLUNA
	MOV AL,7 ;LINHA
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"0"
	CALL PRINT_CAR	
	
	MOV AH,13 ;COLUNA
	MOV AL,7 ;LINHA
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,":"
	CALL PRINT_CAR

	MOV AH,14 ;COLUNA
	MOV AL,7 ;LINHA
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"0"
	CALL PRINT_CAR
	 
	MOV AH,15 ;COLUNA
	MOV AL,7 ;LINHA
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"0"
	CALL PRINT_CAR	

;APAGA DISPLAY
	;CALL GLCD_CLR


;sprite 128x64 bits
;AH = LINHA, COLUNA = AL
        ;LEA SI, CAMINHAO
	;MOV AH,0 ;COLUNA
	;MOV AL,0  ;LINHA
        ;CALL PRINT_ICON

	
;COLOCA UM PIXEL NA CANTO DIREITO SUPERIOR	
;Coluna 127, linha 0
	 ;MOV AH,127
	 ;MOV AL,0
	 ;MOV BH,1
	 ;CALL GLCD_DRAW_POINT
;Coluna 126, linha 1
	 ;MOV AH,126
	 ;MOV AL,1
	 ;MOV BH,1
	 ;CALL GLCD_DRAW_POINT
;APAGA UM PIXEL NA CANTO DIREITO SUPERIOR	
	 ;MOV AH,127
	 ;MOV AL,0
	 ;MOV BH,0
	 ;CALL GLCD_DRAW_POINT
		
;APONTA PARA CAMINHAO
	;LEA SI, TRUCK
;PLOTA CAMINHAO
	;CALL PLOT_BMP	

	RET
	
ICONE_DESPERTADOR_SHOW:
	LEA SI, SINO
	MOV AH,9 ;COLUNA
	MOV AL,6  ;LINHA
	CALL PRINT_ICON
	RET	
	
; ROTINA QUE SERÁ EXECUTADA A CADA UM SEGUNDO  E É INVOCADA AUTOMATICAMENTE PELO 8086 QUANDO HOUVER UMA INTERRUPCAO
INTERRUPT_ONE_SECOND:
	PUSHF 
	PUSH AX ; EMPILHA OS REGISTRADORES
	PUSH DX
	CMP LEU_SEGUNDOS, 01H ; VERIFICA SE ELE LEU UM SEGUNDO
	JNE REST
	CALL ATUALIZAR_RELOGIO ; INVOCA A ROTINA DE ATUALIZAÇÃO DO VALOR CONTIDO NO RELOGIO
	CALL VERIFICA_DESPERTADOR ; VERIFICAR SE O HORARIO CORRENTE É O MESMO ARMAZENADO PELA ALARME
	CALL ALARM_BEEP ;CHAMA ROTINA DO ALARME
	REST:
	POP DX
	POP AX
	POPF
	IRET	
	
; ROTINA QUE IRA INICIALIZAR TODOS OS DISPLAYS COM  VALOR ZERO	
ZERA:
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO0 
    CALL SEG_UNI_0_SHOW
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO1
    CALL SEG_DEZ_0_SHOW
	
	CALL DOIS_PONTOS_SEG_SHOW
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO2
    CALL MIN_UNI_0_SHOW
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO3
    CALL MIN_DEZ_0_SHOW
    
    CALL DOIS_PONTOS_MIN_SHOW
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO4
    CALL HOR_UNI_0_SHOW
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO5
    CALL HOR_DEZ_0_SHOW
    
    RET	

; ROTINA QUE SERÁ USADA PARA EFETUAR A ATUALIZACAO DO RELOGIO    
ATUALIZAR_RELOGIO:
    CMP HOR_DEZ,32H
    JNE CONTINUA
    CMP HOR_UNI,34H
    JE ZERA_HOR_DEZ

; ROTINA QUE EFETUA O PROCESSO DE CONTROLE PARA VERIFICAR OS LIMITES HORARIOS (23:59:59)    
CONTINUA:
    CMP HOR_UNI,39H  
    JE ZERA_HOR_UNI
    CMP MIN_DEZ,36H ; VERIFICAR SE FOI ATINGIDO O VALOR MAXIMO PERMITIDO PARA A DEZENA DE MINUTO (6)
    JE ZERA_MIN_DEZ
    CMP MIN_UNI,39H ; VERIFICAR SE FOI ATINGIDO O VALOR MAXIMO PERMITIDO PARA A UNIDADE DE MINUTO (9)
    JE ZERA_MIN_UNI
    CMP SEG_DEZ,36H ; VERIFICAR SE FOI ATINGIDO O VALOR MAXIMO PERMITIDO PARA A DEZENA DE SEGUNDO (6)
    JE ZERA_SEG_DEZ
    CMP SEG_UNI,39H ; VERIFICAR SE FOI ATINGIDO O VALOR MAXIMO PERMITIDO PARA A UNIDADE DE MINUTO (9)
    JE ZERA_SEG_UNI
    INC SEG_UNI ; INCREMENTA O VALOR DOS SEGUNDO
    JMP SEG_UNI_SHOW ; EXIBE O VALOR NO DISPLAY DO RELOGIO

; ROTINAS RESPONSAVEIS POR ZERAR O VALOR CONTIDO NOS DISPLAYS    
ZERA_SEG_UNI:
    MOV SEG_UNI,30H
    INC SEG_DEZ ; ESTOURA A UNIDADE DE SEGUNDO E INCREMENTA A DEZENA DE SEGUNDO
    JMP SEG_DEZ_SHOW
ZERA_SEG_DEZ:
    MOV SEG_DEZ,30H
    INC MIN_UNI ; ESTOURA A DEZENA DE SEGUNDO E INCREMENTA A UNIDADE DE SEGUNDO
    JMP MIN_UNI_SHOW
ZERA_MIN_UNI:
    MOV MIN_UNI,30H
    INC MIN_DEZ 
    JMP MIN_DEZ_SHOW
ZERA_MIN_DEZ:
    MOV MIN_DEZ,30H
    INC HOR_UNI
    JMP HOR_UNI_SHOW
ZERA_HOR_UNI:
    MOV HOR_UNI,30H
    INC HOR_DEZ
    JMP HOR_DEZ_SHOW 
ZERA_HOR_DEZ:
    MOV HOR_DEZ,30H ; ZERA O VALOR DE TODOS OS DISPLAYS
    MOV HOR_UNI,30H
    MOV MIN_DEZ,30H
    MOV MIN_UNI,30H
    MOV SEG_DEZ,30H
    MOV SEG_UNI,30H
    JMP ZERA

;ROTINA VERIFICANDO QUE NÚMERO DA UNIDADE DOS SEGUNDOS DEVE SER EXIBIDA
SEG_UNI_SHOW:
    CMP SEG_UNI, 30H
    JE SEG_UNI_0
    CMP SEG_UNI, 31H 
    JE SEG_UNI_1
    CMP SEG_UNI, 32H 
    JE SEG_UNI_2
    CMP SEG_UNI, 33H 
    JE SEG_UNI_3
    CMP SEG_UNI, 34H
    JE SEG_UNI_4
    CMP SEG_UNI, 35H 
    JE SEG_UNI_5
    CMP SEG_UNI, 36H 
    JE SEG_UNI_6
    CMP SEG_UNI, 37H 
    JE SEG_UNI_7
    CMP SEG_UNI, 38H 
    JE SEG_UNI_8
    CMP SEG_UNI, 39H
    JE SEG_UNI_9

;ROTINA VERIFICANDO QUE NÚMERO DA DEZENA DOS SEGUNDOS DEVE SER EXIBIDA	
SEG_DEZ_SHOW:
    CMP SEG_DEZ, 30H
    JE SEG_DEZ_0
    CMP SEG_DEZ, 31H 
    JE SEG_DEZ_1
    CMP SEG_DEZ, 32H 
    JE SEG_DEZ_2
    CMP SEG_DEZ, 33H 
    JE SEG_DEZ_3
    CMP SEG_DEZ, 34H
    JE SEG_DEZ_4
    CMP SEG_DEZ, 35H 
    JE SEG_DEZ_5

;ROTINA VERIFICANDO QUE NÚMERO DA UNIDADE DOS MINUTOS DEVE SER EXIBIDA
MIN_UNI_SHOW:
    CMP MIN_UNI, 30H
    JE MIN_UNI_0
    CMP MIN_UNI, 31H 
    JE MIN_UNI_1
    CMP MIN_UNI, 32H 
    JE MIN_UNI_2
    CMP MIN_UNI, 33H 
    JE MIN_UNI_3
    CMP MIN_UNI, 34H
    JE MIN_UNI_4
    CMP MIN_UNI, 35H 
    JE MIN_UNI_5
    CMP MIN_UNI, 36H 
    JE MIN_UNI_6
    CMP MIN_UNI, 37H 
    JE MIN_UNI_7
    CMP MIN_UNI, 38H 
    JE MIN_UNI_8
    CMP MIN_UNI, 39H
    JE MIN_UNI_9

;ROTINA VERIFICANDO QUE NÚMERO DA DEZENA DOS MINUTOS DEVE SER EXIBIDA	
MIN_DEZ_SHOW:
    CMP MIN_DEZ, 30H
    JE MIN_DEZ_0
    CMP MIN_DEZ, 31H 
    JE MIN_DEZ_1
    CMP MIN_DEZ, 32H 
    JE MIN_DEZ_2
    CMP MIN_DEZ, 33H 
    JE MIN_DEZ_3
    CMP MIN_DEZ, 34H
    JE MIN_DEZ_4
    CMP MIN_DEZ, 35H 
    JE MIN_DEZ_5

;ROTINA VERIFICANDO QUE NÚMERO DA UNIDADE DAS HORAS DEVE SER EXIBIDA
HOR_UNI_SHOW:
    CMP HOR_UNI, 30H
    JE HOR_UNI_0
    CMP HOR_UNI, 31H 
    JE HOR_UNI_1
    CMP HOR_UNI, 32H 
    JE HOR_UNI_2
    CMP HOR_UNI, 33H 
    JE HOR_UNI_3
    CMP HOR_UNI, 34H
    JE HOR_UNI_4
    CMP HOR_UNI, 35H 
    JE HOR_UNI_5
    CMP HOR_UNI, 36H 
    JE HOR_UNI_6
    CMP HOR_UNI, 37H 
    JE HOR_UNI_7
    CMP HOR_UNI, 38H 
    JE HOR_UNI_8
    CMP HOR_UNI, 39H
    JE HOR_UNI_9

;ROTINA VERIFICANDO QUE NÚMERO DA DEZENA DAS HORAS DEVE SER EXIBIDA
HOR_DEZ_SHOW:
    CMP HOR_DEZ, 30H
    JE HOR_DEZ_0
    CMP HOR_DEZ, 31H 
    JE HOR_DEZ_1
    CMP HOR_DEZ, 32H 
    JE HOR_DEZ_2
	
DOIS_PONTOS_SEG_SHOW:
	MOV AH,11 ;COLUNA
	MOV AL,4 ;LINHA
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,":"
	CALL PRINT_CAR
	RET
	
DOIS_PONTOS_MIN_SHOW:
	MOV AH,6 ;COLUNA
	MOV AL,3 ;LINHA
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,":"
	CALL PRINT_CAR
	RET	
    
;ROTINA MOSTRANDO DÍGITOS DA UNIDADE DOS SEGUNDOS 0-9 
SEG_UNI_0:
    ;MOV DX, IO0
    ;MOV AL, ZERO
    ;OUT DX, AL
	CALL SEG_UNI_0_SHOW	
    RET
SEG_UNI_1:
    ;MOV DX, IO0
    ;MOV AL, ONE
    ;OUT DX, AL
	CALL SEG_UNI_1_SHOW
    RET
SEG_UNI_2:
    ;MOV DX, IO0
    ;MOV AL, TWO
    ;OUT DX, AL
	CALL SEG_UNI_2_SHOW	
    RET
SEG_UNI_3:
    ;MOV DX, IO0
    ;MOV AL, THREE
    ;OUT DX, AL
	CALL SEG_UNI_3_SHOW
    RET
SEG_UNI_4:
    ;MOV DX, IO0
    ;MOV AL, FOUR
    ;OUT DX, AL
	CALL SEG_UNI_4_SHOW	
    RET
SEG_UNI_5:
    ;MOV DX, IO0
    ;MOV AL, FIVE
    ;OUT DX, AL
	CALL SEG_UNI_5_SHOW
    RET
SEG_UNI_6:
    ;MOV DX, IO0
    ;MOV AL, SIX
    ;OUT DX, AL
	CALL SEG_UNI_6_SHOW
    RET
SEG_UNI_7:
    ;MOV DX, IO0
    ;MOV AL, SEVEN
    ;OUT DX, AL
	CALL SEG_UNI_7_SHOW
    RET
SEG_UNI_8:
    ;MOV DX, IO0
    ;MOV AL, EIGHT
    ;OUT DX, AL
	CALL SEG_UNI_8_SHOW
    RET
SEG_UNI_9:
    ;MOV DX, IO0
    ;MOV AL, NINE
    ;OUT DX, AL
	CALL SEG_UNI_9_SHOW	
    RET

;ROTINA QUE MOSTRANDO DÍGITOS DA DEZENA DOS SEGUNDOS 0-6
SEG_DEZ_0:
    ;MOV DX, IO1
    ;MOV AL, ZERO
    ;OUT DX, AL
	CALL SEG_DEZ_0_SHOW
    JMP SEG_UNI_SHOW
SEG_DEZ_1:
    ;MOV DX, IO1
    ;MOV AL, ONE
    ;OUT DX, AL
	CALL SEG_DEZ_1_SHOW	
    JMP SEG_UNI_SHOW
SEG_DEZ_2:
    ;MOV DX, IO1
    ;MOV AL, TWO
    ;OUT DX, AL
	CALL SEG_DEZ_2_SHOW    
    JMP SEG_UNI_SHOW
SEG_DEZ_3:
    ;MOV DX, IO1
    ;MOV AL, THREE
    ;OUT DX, AL
	CALL SEG_DEZ_3_SHOW    
    JMP SEG_UNI_SHOW
SEG_DEZ_4:
    ;MOV DX, IO1
    ;MOV AL, FOUR
    ;OUT DX, AL
	CALL SEG_DEZ_4_SHOW
    JMP SEG_UNI_SHOW
SEG_DEZ_5:
    ;MOV DX, IO1
    ;MOV AL, FIVE
    ;OUT DX, AL
	CALL SEG_DEZ_5_SHOW
    JMP SEG_UNI_SHOW

;ROTINA QUE MOSTRANDO DÍGITOS DA UNIDADE DOS MINUTOS 0-9 
MIN_UNI_0:
    ;MOV DX, IO2
    ;MOV AL, ZERO
    ;OUT DX, AL
	CALL MIN_UNI_0_SHOW	
    JMP SEG_DEZ_SHOW
MIN_UNI_1:
    ;MOV DX, IO2
    ;MOV AL, ONE
    ;OUT DX, AL
	CALL MIN_UNI_1_SHOW
    JMP SEG_DEZ_SHOW
MIN_UNI_2:
    ;MOV DX, IO2
    ;MOV AL, TWO
    ;OUT DX, AL
	CALL MIN_UNI_2_SHOW
    JMP SEG_DEZ_SHOW
MIN_UNI_3:
    ;MOV DX, IO2
    ;MOV AL, THREE
    ;OUT DX, AL
	CALL MIN_UNI_3_SHOW
    JMP SEG_DEZ_SHOW
MIN_UNI_4:
    ;MOV DX, IO2
    ;MOV AL, FOUR
    ;OUT DX, AL
	CALL MIN_UNI_4_SHOW
    JMP SEG_DEZ_SHOW
MIN_UNI_5:
    ;MOV DX, IO2
    ;MOV AL, FIVE
    ;OUT DX, AL
	CALL MIN_UNI_5_SHOW
    JMP SEG_DEZ_SHOW
MIN_UNI_6:
    ;MOV DX, IO2
    ;MOV AL, SIX
    ;OUT DX, AL
	CALL MIN_UNI_6_SHOW
    JMP SEG_DEZ_SHOW
MIN_UNI_7:
    ;MOV DX, IO2
    ;MOV AL, SEVEN
    ;OUT DX, AL
	CALL MIN_UNI_7_SHOW
    JMP SEG_DEZ_SHOW
MIN_UNI_8:
    ;MOV DX, IO2
    ;MOV AL, EIGHT
    ;OUT DX, AL
	CALL MIN_UNI_8_SHOW
    JMP SEG_DEZ_SHOW
MIN_UNI_9:
    ;MOV DX, IO2
    ;MOV AL, NINE
    ;OUT DX, AL
	CALL MIN_UNI_9_SHOW
    JMP SEG_DEZ_SHOW

;ROTINA QUE MOSTRANDO DÍGITOS DA DEZENA DOS MINUTOS 0-6
MIN_DEZ_0:
    ;MOV DX, IO3
    ;MOV AL, ZERO
    ;OUT DX, AL
	CALL MIN_DEZ_0_SHOW
    JMP MIN_UNI_SHOW
MIN_DEZ_1:
    ;MOV DX, IO3
    ;MOV AL, ONE
    ;OUT DX, AL
	CALL MIN_DEZ_1_SHOW
    JMP MIN_UNI_SHOW
MIN_DEZ_2:
    ;MOV DX, IO3
    ;MOV AL, TWO
    ;OUT DX, AL
	CALL MIN_DEZ_2_SHOW
    JMP MIN_UNI_SHOW
MIN_DEZ_3:
    ;MOV DX, IO3
    ;MOV AL, THREE
    ;OUT DX, AL
	CALL MIN_DEZ_3_SHOW
    JMP MIN_UNI_SHOW
MIN_DEZ_4:
    ;MOV DX, IO3
    ;MOV AL, FOUR
    ;OUT DX, AL
	CALL MIN_DEZ_4_SHOW
    JMP MIN_UNI_SHOW
MIN_DEZ_5:
    ;MOV DX, IO3
    ;MOV AL, FIVE
    ;OUT DX, AL
	CALL MIN_DEZ_5_SHOW
    JMP MIN_UNI_SHOW

;ROTINA QUE MOSTRANDO DÍGITOS DA UNIDADE DAS HORAS 0-9 
HOR_UNI_0:
    ;MOV DX, IO4
    ;MOV AL, ZERO
    ;OUT DX, AL
	CALL HOR_UNI_0_SHOW
    JMP MIN_DEZ_SHOW
HOR_UNI_1:
    ;MOV DX, IO4
    ;MOV AL, ONE
    ;OUT DX, AL
	CALL HOR_UNI_1_SHOW
    JMP MIN_DEZ_SHOW
HOR_UNI_2:
    ;MOV DX, IO4
    ;MOV AL, TWO
    ;OUT DX, AL
	CALL HOR_UNI_2_SHOW
    JMP MIN_DEZ_SHOW
HOR_UNI_3:
    ;MOV DX, IO4
    ;MOV AL, THREE
    ;OUT DX, AL
	CALL HOR_UNI_3_SHOW
    JMP MIN_DEZ_SHOW
HOR_UNI_4:
    ;MOV DX, IO4
    ;MOV AL, FOUR
    ;OUT DX, AL
	CALL HOR_UNI_4_SHOW
    JMP MIN_DEZ_SHOW
HOR_UNI_5:
    ;MOV DX, IO4
    ;MOV AL, FIVE
    ;OUT DX, AL
	CALL HOR_UNI_5_SHOW
    JMP MIN_DEZ_SHOW
HOR_UNI_6:
    ;MOV DX, IO4
    ;MOV AL, SIX
    ;OUT DX, AL
	CALL HOR_UNI_6_SHOW
    JMP MIN_DEZ_SHOW
HOR_UNI_7:
    ;MOV DX, IO4
    ;MOV AL, SEVEN
    ;OUT DX, AL
	CALL HOR_UNI_7_SHOW
    JMP MIN_DEZ_SHOW
HOR_UNI_8:
    ;MOV DX, IO4
    ;MOV AL, EIGHT
    ;OUT DX, AL
	CALL HOR_UNI_8_SHOW
    JMP MIN_DEZ_SHOW
HOR_UNI_9:
    ;MOV DX, IO4
    ;MOV AL, NINE
    ;OUT DX, AL
	CALL HOR_UNI_9_SHOW
    JMP MIN_DEZ_SHOW   

;ROTINA QUE MOSTRANDO DÍGITOS DA DEZENA DAS HORAS 0-6
HOR_DEZ_0:
    ;MOV DX, IO5
    ;MOV AL, ZERO
    ;OUT DX, AL	
    CALL HOR_DEZ_0_SHOW	
    JMP HOR_UNI_SHOW
HOR_DEZ_1:
    ;MOV DX, IO5
    ;MOV AL, ONE
    ;OUT DX, AL
	CALL HOR_DEZ_1_SHOW
    JMP HOR_UNI_SHOW
HOR_DEZ_2:
    ;MOV DX, IO5
    ;MOV AL, TWO
    ;OUT DX, AL
	CALL HOR_DEZ_2_SHOW
    JMP HOR_UNI_SHOW
HOR_DEZ_3:
    ;MOV DX, IO5
    ;MOV AL, THREE
    ;OUT DX, AL
	CALL HOR_DEZ_3_SHOW
    JMP HOR_UNI_SHOW
HOR_DEZ_4:
    ;MOV DX, IO5
    ;MOV AL, FOUR
    ;OUT DX, AL
	CALL HOR_DEZ_4_SHOW
    JMP HOR_UNI_SHOW
HOR_DEZ_5:
    ;MOV DX, IO5
    ;MOV AL, FIVE
    ;OUT DX, AL
	CALL HOR_DEZ_5_SHOW
    JMP HOR_UNI_SHOW
    
JMP ZERA	
	
SETA_POSICAO_SEG_UNI:
	MOV AH,13 ;COLUNA
	MOV AL,4 ;LINHA
	RET
	
SEG_UNI_0_SHOW:	
	CALL SETA_POSICAO_SEG_UNI
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"0"
	CALL PRINT_CAR
	RET

SEG_UNI_1_SHOW:	
	CALL SETA_POSICAO_SEG_UNI
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"1"
	CALL PRINT_CAR
	RET

SEG_UNI_2_SHOW:	
	CALL SETA_POSICAO_SEG_UNI
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"2"
	CALL PRINT_CAR
	RET

SEG_UNI_3_SHOW:	
	CALL SETA_POSICAO_SEG_UNI
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"3"
	CALL PRINT_CAR
	RET

SEG_UNI_4_SHOW:	
	CALL SETA_POSICAO_SEG_UNI
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"4"
	CALL PRINT_CAR
	RET

SEG_UNI_5_SHOW:	
	CALL SETA_POSICAO_SEG_UNI
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"5"
	CALL PRINT_CAR
	RET

SEG_UNI_6_SHOW:	
	CALL SETA_POSICAO_SEG_UNI
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"6"
	CALL PRINT_CAR
	RET

SEG_UNI_7_SHOW:	
	CALL SETA_POSICAO_SEG_UNI
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"7"
	CALL PRINT_CAR
	RET

SEG_UNI_8_SHOW:	
	CALL SETA_POSICAO_SEG_UNI
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"8"
	CALL PRINT_CAR
	RET

SEG_UNI_9_SHOW:	
	CALL SETA_POSICAO_SEG_UNI
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"9"
	CALL PRINT_CAR
	RET
	
	;
	;
	;
	
SETA_POSICAO_SEG_DEZ:
	MOV AH,12 ;COLUNA
	MOV AL,4 ;LINHA
	RET
	
SEG_DEZ_0_SHOW:	
	CALL SETA_POSICAO_SEG_DEZ
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"0"
	CALL PRINT_CAR
	RET

SEG_DEZ_1_SHOW:	
	CALL SETA_POSICAO_SEG_DEZ
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"1"
	CALL PRINT_CAR
	RET

SEG_DEZ_2_SHOW:	
	CALL SETA_POSICAO_SEG_DEZ
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"2"
	CALL PRINT_CAR
	RET

SEG_DEZ_3_SHOW:	
	CALL SETA_POSICAO_SEG_DEZ
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"3"
	CALL PRINT_CAR
	RET

SEG_DEZ_4_SHOW:	
	CALL SETA_POSICAO_SEG_DEZ
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"4"
	CALL PRINT_CAR
	RET

SEG_DEZ_5_SHOW:	
	CALL SETA_POSICAO_SEG_DEZ
    CALL GLCD_GOTO_XY_TEXT
	MOV AL,"5"
	CALL PRINT_CAR
	RET	
	
	;
	;
	;
SETA_POSICAO_MIN_UNI:
	MOV AH,9 ;COLUNA
	MOV AL,2 ;LINHA
	RET

MIN_UNI_0_SHOW:	
	LEA SI, ZERO_LCD
	CALL SETA_POSICAO_MIN_UNI
	CALL PRINT_ICON
	RET

MIN_UNI_1_SHOW:	
	LEA SI, UM_LCD
	CALL SETA_POSICAO_MIN_UNI
	CALL PRINT_ICON
	RET

MIN_UNI_2_SHOW:	
	LEA SI, DOIS_LCD
	CALL SETA_POSICAO_MIN_UNI
	CALL PRINT_ICON
	RET

MIN_UNI_3_SHOW:	
	LEA SI, TRES_LCD
	CALL SETA_POSICAO_MIN_UNI
	CALL PRINT_ICON
	RET

MIN_UNI_4_SHOW:	
	LEA SI, QUATRO_LCD
	CALL SETA_POSICAO_MIN_UNI
	CALL PRINT_ICON
	RET

MIN_UNI_5_SHOW:	
	LEA SI, CINCO_LCD
	CALL SETA_POSICAO_MIN_UNI
	CALL PRINT_ICON
	RET

MIN_UNI_6_SHOW:	
	LEA SI, SEIS_LCD
	CALL SETA_POSICAO_MIN_UNI
	CALL PRINT_ICON
	RET

MIN_UNI_7_SHOW:	
	LEA SI, SETE_LCD
	CALL SETA_POSICAO_MIN_UNI
	CALL PRINT_ICON
	RET

MIN_UNI_8_SHOW:	
	LEA SI, OITO_LCD
	CALL SETA_POSICAO_MIN_UNI
	CALL PRINT_ICON
	RET

MIN_UNI_9_SHOW:	
	LEA SI, NOVE_LCD
	CALL SETA_POSICAO_MIN_UNI
	CALL PRINT_ICON
	RET
	
	;
	;
	;
SETA_POSICAO_MIN_DEZ:
	MOV AH,7 ;COLUNA
	MOV AL,2 ;LINHA
	RET

MIN_DEZ_0_SHOW:	
	LEA SI, ZERO_LCD
	CALL SETA_POSICAO_MIN_DEZ
	CALL PRINT_ICON
	RET

MIN_DEZ_1_SHOW:	
	LEA SI, UM_LCD
	CALL SETA_POSICAO_MIN_DEZ
	CALL PRINT_ICON
	RET

MIN_DEZ_2_SHOW:	
	LEA SI, DOIS_LCD
	CALL SETA_POSICAO_MIN_DEZ
	CALL PRINT_ICON
	RET

MIN_DEZ_3_SHOW:	
	LEA SI, TRES_LCD
	CALL SETA_POSICAO_MIN_DEZ
	CALL PRINT_ICON
	RET

MIN_DEZ_4_SHOW:	
	LEA SI, QUATRO_LCD
	CALL SETA_POSICAO_MIN_DEZ
	CALL PRINT_ICON
	RET

MIN_DEZ_5_SHOW:	
	LEA SI, CINCO_LCD
	CALL SETA_POSICAO_MIN_DEZ
	CALL PRINT_ICON
	RET	
	
	;
	;
	;
SETA_POSICAO_HOR_UNI:
	MOV AH,4 ;COLUNA
	MOV AL,2 ;LINHA
	RET

HOR_UNI_0_SHOW:	
	LEA SI, ZERO_LCD
	CALL SETA_POSICAO_HOR_UNI
	CALL PRINT_ICON
	RET

HOR_UNI_1_SHOW:	
	LEA SI, UM_LCD
	CALL SETA_POSICAO_HOR_UNI
	CALL PRINT_ICON
	RET

HOR_UNI_2_SHOW:	
	LEA SI, DOIS_LCD
	CALL SETA_POSICAO_HOR_UNI
	CALL PRINT_ICON
	RET

HOR_UNI_3_SHOW:	
	LEA SI, TRES_LCD
	CALL SETA_POSICAO_HOR_UNI
	CALL PRINT_ICON
	RET

HOR_UNI_4_SHOW:	
	LEA SI, QUATRO_LCD
	CALL SETA_POSICAO_HOR_UNI
	CALL PRINT_ICON
	RET

HOR_UNI_5_SHOW:	
	LEA SI, CINCO_LCD
	CALL SETA_POSICAO_HOR_UNI
	CALL PRINT_ICON
	RET

HOR_UNI_6_SHOW:	
	LEA SI, SEIS_LCD
	CALL SETA_POSICAO_HOR_UNI
	CALL PRINT_ICON
	RET

HOR_UNI_7_SHOW:	
	LEA SI, SETE_LCD
	CALL SETA_POSICAO_HOR_UNI
	CALL PRINT_ICON
	RET

HOR_UNI_8_SHOW:	
	LEA SI, OITO_LCD
	CALL SETA_POSICAO_HOR_UNI
	CALL PRINT_ICON
	RET

HOR_UNI_9_SHOW:	
	LEA SI, NOVE_LCD
	CALL SETA_POSICAO_HOR_UNI
	CALL PRINT_ICON
	RET
	
	;
	;
	;
SETA_POSICAO_HOR_DEZ:
	MOV AH,2 ;COLUNA
	MOV AL,2 ;LINHA
	RET

HOR_DEZ_0_SHOW:	
	LEA SI, ZERO_LCD
	CALL SETA_POSICAO_HOR_DEZ
	CALL PRINT_ICON
	RET

HOR_DEZ_1_SHOW:	
	LEA SI, UM_LCD
	CALL SETA_POSICAO_HOR_DEZ
	CALL PRINT_ICON
	RET

HOR_DEZ_2_SHOW:	
	LEA SI, DOIS_LCD
	CALL SETA_POSICAO_HOR_DEZ
	CALL PRINT_ICON
	RET

HOR_DEZ_3_SHOW:	
	LEA SI, TRES_LCD
	CALL SETA_POSICAO_HOR_DEZ
	CALL PRINT_ICON
	RET

HOR_DEZ_4_SHOW:	
	LEA SI, QUATRO_LCD
	CALL SETA_POSICAO_HOR_DEZ
	CALL PRINT_ICON
	RET

HOR_DEZ_5_SHOW:	
	LEA SI, CINCO_LCD
	CALL SETA_POSICAO_HOR_DEZ
	CALL PRINT_ICON
	RET

JMP ZERA ; ver porque isso estah aqui	
	
; ROTINA RESPONSAVEL POR CONFIGURAR A INICIALIZACAO DO TERMINAL
INICIALIZA_8251:                                     
   MOV AL,0
   MOV DX, ADR_USART_CMD ;INFORMA QUE SERÁ ENVIAO UM COMANDOPARA O TERMINAL
   OUT DX,AL
   OUT DX,AL
   OUT DX,AL
   MOV AL,40H
   OUT DX,AL
   MOV AL,4DH
   OUT DX,AL
   MOV AL,37H
   OUT DX,AL
   RET

RECEBE_CARACTER:
   PUSHF
   PUSH DX
   
;ROTINA QUE AGUARDA O RECEBIMENTO DE UM CARACTERE   
AGUARDA_CARACTER:
   MOV DX, ADR_USART_STAT ; INICIA A COMUNICACAO COM SERIAL
   IN  AL,DX
   TEST AL,2
   JZ AGUARDA_CARACTER
   MOV DX, ADR_USART_DATA ;RECEBE O DADO LIDO NO TERMINAL
   IN AL,DX
   SHR AL,1

; ROTINA EXECUTADA AFIM DE "PRENDER" A EXECUCAO QUANDO UM DADO NAO E RECEBIDO NA SERIAL
NAO_RECEBIDO:
   POP DX
   POPF
   RET
   
; ROTINA QUE PREPARA UM CARACTERE PARA SER ENVIADO   
MANDA_CARACTER:
   PUSHF
   PUSH DX
   PUSH AX  ; SALVA AL   
   
BUSY:
   MOV DX, ADR_USART_STAT ; INICIA A COMUNICACAO COM SERIAL
   IN  AL,DX
   TEST AL,1
   JZ BUSY
   MOV DX, ADR_USART_DATA ; RECEBE O DADO LIDO NO TERMINAL 
   POP AX  ; RESTAURA AL
   OUT DX,AL
   POP DX
   POPF
   RET	

; ROTINA QUE RECEBE PROCESSA A LEITURA DE UM CARACTER ENVIADO PARA O DESPERTADOR
ECOAR_LEITURA_DESPERTADOR:
   CALL RECEBE_CARACTER

DESPERTADOR:
   CMP LEU_HORAS, 00H
   JE LER_HORA_DESPERTADOR
   CMP LEU_MINUTOS, 00H
   JE LER_MINUTO_DESPERTADOR
   CMP LEU_SEGUNDOS, 00H
   JE LER_SEGUNDO_DESPERTADOR
   CALL MANDA_CARACTER	

LER_HORA_DESPERTADOR:
   CALL MOSTRAR_MSG_HORAS
   CMP DIGITOU_DEZENA, 00H
   JE LER_DEZ_H
   JMP LER_UNI_H

LER_MINUTO_DESPERTADOR:
   CALL MOSTRAR_MSG_MINUTOS
   CMP DIGITOU_DEZENA, 00H
   JE LER_DEZ_M
   JMP LER_UNI_M
   
LER_SEGUNDO_DESPERTADOR:
   CALL MOSTRAR_MSG_SEGUNDOS
   CMP DIGITOU_DEZENA, 00H
   JE LER_DEZ_S
   JMP LER_UNI_S
   
 ; LE OS VALORES
LER_UNI_H:
   MOV HOR_UNI_DES, AL
   MOV DIGITOU_DEZENA, 00H
   CALL MANDA_CARACTER
   MOV AX, 13
   CALL MANDA_CARACTER
   INC LEU_HORAS
   JMP DESPERTADOR

LER_DEZ_H: 
   MOV HOR_DEZ_DES, AL
   INC DIGITOU_DEZENA
   CALL MANDA_CARACTER
   JMP ECOAR_LEITURA_DESPERTADOR
      
LER_UNI_M:
   MOV MIN_UNI_DES, AL
   MOV DIGITOU_DEZENA, 00H
   CALL MANDA_CARACTER
   MOV AX, 13
   CALL MANDA_CARACTER
   INC LEU_MINUTOS
   JMP DESPERTADOR

LER_DEZ_M: 
   MOV MIN_DEZ_DES, AL
   INC DIGITOU_DEZENA
   CALL MANDA_CARACTER
   JMP ECOAR_LEITURA_DESPERTADOR   
   
LER_UNI_S:
   MOV SEG_UNI_DES, AL
   MOV DIGITOU_DEZENA, 00H
   CALL MANDA_CARACTER
   MOV AX, 13
   CALL MANDA_CARACTER
   INC LEU_SEGUNDOS
   JMP MOSTRAR_DESPERTADOR

LER_DEZ_S: 
   MOV SEG_DEZ_DES, AL
   INC DIGITOU_DEZENA
   CALL MANDA_CARACTER
   JMP ECOAR_LEITURA_DESPERTADOR
   
MOSTRAR_BX:
   MOV AL, [BX]
   CMP AL, 0
   JE FIM_MOSTRAR_BX
   CALL MANDA_CARACTER
   INC BX
   JMP MOSTRAR_BX    
FIM_MOSTRAR_BX:
   RET
   
MOSTRAR_MSG_HORAS:
   CMP MOSTROU_MSG_H, 00H
   JNE RETORNO
   LEA BX, MSG_DESP_H
   CALL MOSTRAR_BX
   INC MOSTROU_MSG_H
   JMP ECOAR_LEITURA_DESPERTADOR
MOSTRAR_MSG_MINUTOS:
   CMP MOSTROU_MSG_M, 00H
   JNE RETORNO
   LEA BX, MSG_DESP_M
   CALL MOSTRAR_BX
   INC MOSTROU_MSG_M
   JMP ECOAR_LEITURA_DESPERTADOR

MOSTRAR_MSG_SEGUNDOS:
   CMP MOSTROU_MSG_S, 00H
   JNE RETORNO
   LEA BX, MSG_DESP_S
   CALL MOSTRAR_BX
   INC MOSTROU_MSG_S
   JMP ECOAR_LEITURA_DESPERTADOR
RETORNO:
   RET
   
MOSTRAR_DESPERTADOR:
   LEA BX, MSG_DESPERTADOR
   CALL MOSTRAR_BX
   
   MOV AL, HOR_DEZ_DES
   CALL MANDA_CARACTER
   MOV AL, HOR_UNI_DES
   CALL MANDA_CARACTER
   
   LEA BX, DOIS_PONTOS
   CALL MOSTRAR_BX
   
   MOV AL, MIN_DEZ_DES
   CALL MANDA_CARACTER
   MOV AL, MIN_UNI_DES
   CALL MANDA_CARACTER
   
   LEA BX, DOIS_PONTOS
   CALL MOSTRAR_BX
   
   MOV AL, SEG_DEZ_DES
   CALL MANDA_CARACTER
   MOV AL, SEG_UNI_DES
   CALL MANDA_CARACTER
   
   JMP LOOP_INI
   
VERIFICA_DESPERTADOR:
   MOV AL, HOR_DEZ
   CMP AL, HOR_DEZ_DES
   JE COMP_HOR_UNI
   RET
COMP_HOR_UNI:
   MOV AL, HOR_UNI
   CMP AL, HOR_UNI_DES
   JE COMP_MIN_DEZ
   RET
COMP_MIN_DEZ:
   MOV AL, MIN_DEZ
   CMP AL, MIN_DEZ_DES
   JE COMP_MIN_UNI
   RET
COMP_MIN_UNI:
   MOV AL, MIN_UNI
   CMP AL, MIN_UNI_DES
   JE COMP_SEG_DEZ
   RET
COMP_SEG_DEZ:
   MOV AL, SEG_DEZ
   CMP AL, SEG_DEZ_DES
   JE COMP_SEG_UNI
   RET
COMP_SEG_UNI:
   MOV AL, SEG_UNI
   CMP AL, SEG_UNI_DES
   JE DESPERTAR
   RET
DESPERTAR:
   LEA BX, MSG_DESPERTADOR
   CALL MOSTRAR_BX
   INC START_INC 
   RET

ALARM_BEEP:
	CMP START_INC,01H
	JNE GO_ON
	CMP ALARM_BREAK, 00H
	JNE BEEP_01
	MACRO_INICIALIZA_8253_TIMER0 00H,0BFH 
	BEEP_01:
	CMP ALARM_BREAK, 01H
	JNE BEEP_02
	MACRO_INICIALIZA_8253_TIMER0 00H,0AAH
	BEEP_02:
	CMP ALARM_BREAK, 02H
	JNE BEEP_03
	MACRO_INICIALIZA_8253_TIMER0 00H,088H
	BEEP_03:
	CMP ALARM_BREAK, 03H
	JNE BEEP_04
	MACRO_INICIALIZA_8253_TIMER0 00H,0AAH
	BEEP_04:
	CMP ALARM_BREAK, 04H
	JNE BEEP_05
	MACRO_INICIALIZA_8253_TIMER0 00H,0BFH
	BEEP_05:
	CMP ALARM_BREAK, 05H
	JNE BEEP_06
	MACRO_INICIALIZA_8253_TIMER0 00H,0AAH 
	BEEP_06:
	CMP ALARM_BREAK, 06H
	JNE BEEP_07
	MACRO_INICIALIZA_8253_TIMER0 00H,088H
	BEEP_07:
	CMP ALARM_BREAK, 07H
	JNE BEEP_08
	MACRO_INICIALIZA_8253_TIMER0 00H,0AAH
	BEEP_08:
	CMP ALARM_BREAK, 08H
	JNE BEEP_09
	MACRO_INICIALIZA_8253_TIMER0 00H,0BFH
	BEEP_09:
	CMP ALARM_BREAK, 09H
	JNE BEEP_10
	MACRO_INICIALIZA_8253_TIMER0 00H,0AAH
	BEEP_10:
	CMP ALARM_BREAK, 10H
	JNE BEEP_11
	MACRO_INICIALIZA_8253_TIMER0 00H,088H 
	BEEP_11:
	CMP ALARM_BREAK, 11H
	JNE BEEP_12
	MACRO_INICIALIZA_8253_TIMER0 00H,0AAH
	BEEP_12:
	CMP ALARM_BREAK, 12H
	JNE BEEP_13
	MACRO_INICIALIZA_8253_TIMER0 00H,0BFH
	BEEP_13:
	CMP ALARM_BREAK, 13H
	JNE BEEP_14
	MACRO_INICIALIZA_8253_TIMER0 00H,000H
	BEEP_14:
	INC ALARM_BREAK
	GO_ON:	
RET	

.DATA
	START_INC DB 00H
	ALARM_BREAK DB 00H

    SEG_UNI DB 30H
    SEG_DEZ DB 30H
    MIN_UNI DB 30H
    MIN_DEZ DB 30H
    HOR_UNI DB 30H
    HOR_DEZ DB 30H
    
    MSG_INI_H  DB "DIGITE AS HORAS INICIAIS",13,10,0
    MSG_INI_M  DB "DIGITE OS MINUTOS INICIAIS",13,10,0
    MSG_INI_S  DB "DIGITE OS SEGUNDOS INICIAIS",13,10,0
    MSG_DESP_H DB "DIGITE AS HORAS PARA O DESPERTADOR",13,10,0
    MSG_DESP_M DB "DIGITE OS MINUTOS PARA O DESPERTADOR",13,10,0
    MSG_DESP_S DB "DIGITE OS SEGUNDOS PARA O DESPERTADOR",13,10,0
    MSG_DESPERTADOR DB "O DESPERTADOR IRA TOCAR AS ",0
    DOIS_PONTOS DB ":",0
    
    SEG_UNI_DES DB 00H
    SEG_DEZ_DES DB 00H
    MIN_UNI_DES DB 00H
    MIN_DEZ_DES DB 00H
    HOR_UNI_DES DB 00H
    HOR_DEZ_DES DB 00H
    
    DIGITOU_DEZENA DB 00H
    LEU_HORAS DB 00H
    LEU_MINUTOS DB 00H
    LEU_SEGUNDOS DB 00H
    MOSTROU_MSG_H DB 00H
    MOSTROU_MSG_M DB 00H
    MOSTROU_MSG_S DB 00H
    
    
    CONTADOR_SEGUNDOS DB 0
    NOTA DB 0
    TEMPO_NOTA DB 0

GLCD_CONTROL DB 0
GLCD_DATA    DB 0
COL_DATA DB 0
COL_DATA_AUX DB 0
READ_DATA DB 0
LINHA DB 0

QNT_COLUNAS DB 0
SALVA_QNT_COLUNAS DB 0
POS_COLUNAS DB 0

FONTS  	        DB      32*5 DUP(0)
	        DB	00H, 00H, 00H, 00H, 00H ; (space)
		DB	00H, 00H, 5FH, 00H, 00H ; !
		DB	00H, 07H, 00H, 07H, 00H ; "
		DB	14H, 7FH, 14H, 7FH, 14H ; #
		DB	24H, 2AH, 7FH, 2AH, 12H ; $
		DB	23H, 13H, 08H, 64H, 62H ; %
		DB	36H, 49H, 55H, 22H, 50H; &
		DB	00H, 05H, 03H, 00H, 00H; '
		DB	00H, 1CH, 22H, 41H, 00H; (
		DB	00H, 41H, 22H, 1CH, 00H; )
		DB	08H, 2AH, 1CH, 2AH, 08H; *
		DB	08H, 08H, 3EH, 08H, 08H; +
		DB	00H, 50H, 30H, 00H, 00H; H,
		DB	08H, 08H, 08H, 08H, 08H; -
		DB	00H, 60H, 60H, 00H, 00H; .
		DB	20H, 10H, 08H, 04H, 02H; /
		DB	3EH, 51H, 49H, 45H, 3EH; 0
		DB	00H, 42H, 7FH, 40H, 00H; 1
		DB	42H, 61H, 51H, 49H, 46H; 2
		DB	21H, 41H, 45H, 4BH, 31H; 3
		DB	18H, 14H, 12H, 7FH, 10H; 4
		DB	27H, 45H, 45H, 45H, 39H; 5
		DB	3CH, 4AH, 49H, 49H, 30H; 6
		DB	01H, 71H, 09H, 05H, 03H; 7
		DB	36H, 49H, 49H, 49H, 36H; 8
		DB	06H, 49H, 49H, 29H, 1EH; 9
		DB	00H, 36H, 36H, 00H, 00H; :
		DB	00H, 56H, 36H, 00H, 00H; ;
		DB	00H, 08H, 14H, 22H, 41H; <
		DB	14H, 14H, 14H, 14H, 14H; =
		DB	41H, 22H, 14H, 08H, 00H; >
		DB	02H, 01H, 51H, 09H, 06H; ?
		DB	32H, 49H, 79H, 41H, 3EH; @
		DB	7EH, 11H, 11H, 11H, 7EH; A
		DB	7FH, 49H, 49H, 49H, 36H; B
		DB	3EH, 41H, 41H, 41H, 22H; C
		DB	7FH, 41H, 41H, 22H, 1CH; D
		DB	7FH, 49H, 49H, 49H, 41H; E
		DB	7FH, 09H, 09H, 01H, 01H; F
		DB	3EH, 41H, 41H, 51H, 32H; G
		DB	7FH, 08H, 08H, 08H, 7FH; H
		DB	00H, 41H, 7FH, 41H, 00H; I
		DB	20H, 40H, 41H, 3FH, 01H; J
		DB	7FH, 08H, 14H, 22H, 41H; K
		DB	7FH, 40H, 40H, 40H, 40H; L
		DB	7FH, 02H, 04H, 02H, 7FH; M
		DB	7FH, 04H, 08H, 10H, 7FH; N
		DB	3EH, 41H, 41H, 41H, 3EH; O
		DB	7FH, 09H, 09H, 09H, 06H; P
		DB	3EH, 41H, 51H, 21H, 5EH; Q
		DB	7FH, 09H, 19H, 29H, 46H; R
		DB	46H, 49H, 49H, 49H, 31H; S
		DB	01H, 01H, 7FH, 01H, 01H; T
		DB	3FH, 40H, 40H, 40H, 3FH; U
		DB	1FH, 20H, 40H, 20H, 1FH; V
		DB	7FH, 20H, 18H, 20H, 7FH; W
		DB	63H, 14H, 08H, 14H, 63H; X
		DB	03H, 04H, 78H, 04H, 03H; Y
		DB	61H, 51H, 49H, 45H, 43H; Z
		DB	00H, 00H, 7FH, 41H, 41H; [
		DB	02H, 04H, 08H, 10H, 20H; "\"
		DB	41H, 41H, 7FH, 00H, 00H; ]
		DB	04H, 02H, 01H, 02H, 04H; ^
		DB	40H, 40H, 40H, 40H, 40H; _
		DB	00H, 01H, 02H, 04H, 00H; `
		DB	20H, 54H, 54H, 54H, 78H; a
		DB	7FH, 48H, 44H, 44H, 38H; b
		DB	38H, 44H, 44H, 44H, 20H; c
		DB	38H, 44H, 44H, 48H, 7FH; d
		DB	38H, 54H, 54H, 54H, 18H; e
		DB	08H, 7EH, 09H, 01H, 02H; f
		DB	08H, 14H, 54H, 54H, 3CH; g
		DB	7FH, 08H, 04H, 04H, 78H; h
		DB	00H, 44H, 7DH, 40H, 00H; i
		DB	20H, 40H, 44H, 3DH, 00H; j
		DB	00H, 7FH, 10H, 28H, 44H; k
		DB	00H, 41H, 7FH, 40H, 00H; l
		DB	7CH, 04H, 18H, 04H, 78H; m
		DB	7CH, 08H, 04H, 04H, 78H; n
		DB	38H, 44H, 44H, 44H, 38H; o
		DB	7CH, 14H, 14H, 14H, 08H; p
		DB	08H, 14H, 14H, 18H, 7CH; q
		DB	7CH, 08H, 04H, 04H, 08H; r
		DB	48H, 54H, 54H, 54H, 20H; s
		DB	04H, 3FH, 44H, 40H, 20H; t
		DB	3CH, 40H, 40H, 20H, 7CH; u
		DB	1CH, 20H, 40H, 20H, 1CH; v
		DB	3CH, 40H, 30H, 40H, 3CH; w
		DB	44H, 28H, 10H, 28H, 44H; x
		DB	0CH, 50H, 50H, 50H, 3CH; y
		DB	44H, 64H, 54H, 4CH, 44H; z
		DB       00H, 08H, 36H, 41H, 00H; {
		DB	00H, 00H, 7FH, 00H, 00H; |
		DB	00H, 41H, 36H, 08H, 00H; }
		DB	08H, 08H, 2AH, 1CH, 08H; ->
		DB	08H, 1CH, 2AH, 08H, 08 ; <-

SINO DB 2,2
	 DB 00CH,08EH,0E7H,033H,018H,00CH,00CH,0CDH,08DH,00CH,00CH,018H,033H,0E7H,08EH,00CH
	 DB 000H,003H,00FH,039H,0F0H,060H,060H,061H,063H,066H,064H,0F0H,039H,00FH,003H,000H

ZERO_LCD DB 2,3
		DB 000H,000H,000H,080H,0F0H,078H,01CH,00CH,00CH,01CH,078H,0F0H,080H,000H,000H,000H
		DB 000H,000H,000H,0FFH,0FFH,000H,000H,000H,000H,000H,000H,0FFH,0FFH,000H,000H,000H
		DB 000H,000H,000H,001H,00FH,01EH,038H,030H,030H,038H,01EH,00FH,001H,000H,000H,000H
		
UM_LCD DB 2,3
	 	DB 000H,000H,000H,000H,080H,0C0H,060H,070H,0FCH,0FCH,000H,000H,000H,000H,000H,000H
		DB 000H,000H,000H,000H,001H,000H,000H,000H,0FFH,0FFH,000H,000H,000H,000H,000H,000H
		DB 000H,000H,000H,000H,000H,000H,000H,000H,03FH,03FH,000H,000H,000H,000H,000H,000H

DOIS_LCD DB 2,3
	 	DB 000H,000H,000H,0E0H,0F0H,038H,00CH,00CH,00CH,00CH,018H,0F8H,0E0H,000H,000H,000H
		DB 000H,000H,000H,000H,000H,000H,080H,0C0H,0E0H,070H,03CH,00FH,003H,000H,000H,000H
		DB 000H,000H,000H,030H,03CH,03FH,037H,033H,030H,030H,030H,030H,030H,000H,000H,000H

TRES_LCD DB 2,3
	 	DB 000H,000H,000H,060H,078H,018H,00CH,00CH,00CH,01CH,0F8H,0E0H,000H,000H,000H,000H
		DB 000H,000H,000H,000H,000H,000H,000H,00CH,00CH,00EH,03FH,0F1H,0E0H,000H,000H,000H
		DB 000H,000H,000H,006H,01EH,018H,030H,030H,030H,038H,01CH,00FH,007H,000H,000H,000H

QUATRO_LCD DB 2,3
	 	DB 000H,000H,000H,000H,000H,000H,080H,0E0H,078H,0FCH,0FCH,000H,000H,000H,000H,000H
		DB 000H,000H,0C0H,0F0H,0BCH,08EH,087H,081H,080H,0FFH,0FFH,080H,080H,000H,000H,000H
		DB 000H,000H,001H,001H,001H,001H,001H,001H,001H,03FH,03FH,001H,001H,000H,000H,000H

CINCO_LCD DB 2,3
	 	DB 000H,000H,000H,080H,0FCH,07CH,00CH,00CH,00CH,00CH,00CH,00CH,000H,000H,000H,000H
		DB 000H,000H,000H,00FH,00FH,006H,003H,003H,003H,007H,00EH,0FCH,0F8H,000H,000H,000H
		DB 000H,000H,000H,006H,01EH,018H,030H,030H,030H,038H,01CH,00FH,003H,000H,000H,000H

SEIS_LCD DB 2,3
	 	DB 000H,000H,000H,080H,0E0H,038H,018H,00CH,00CH,00CH,01CH,078H,060H,000H,000H,000H
		DB 000H,000H,000H,0FFH,0FFH,01CH,00CH,006H,006H,006H,01CH,0F8H,0F0H,000H,000H,000H
		DB 000H,000H,000H,001H,00FH,01CH,038H,030H,030H,038H,01CH,00FH,003H,000H,000H,000H

SETE_LCD DB 2,3
	 	DB 000H,000H,000H,00CH,00CH,00CH,00CH,00CH,00CH,0CCH,0ECH,03CH,01CH,000H,000H,000H
		DB 000H,000H,000H,000H,000H,000H,0E0H,0F8H,03FH,007H,000H,000H,000H,000H,000H,000H
		DB 000H,000H,000H,000H,000H,03CH,03FH,003H,000H,000H,000H,000H,000H,000H,000H,000H

OITO_LCD DB 2,3
	 	DB 000H,000H,000H,000H,0F0H,0F8H,01CH,00CH,00CH,01CH,0F8H,0F0H,000H,000H,000H,000H
		DB 000H,000H,000H,0E0H,0F1H,03BH,00EH,00CH,00CH,01EH,03BH,0F1H,0E0H,000H,000H,000H
		DB 000H,000H,000H,007H,00FH,01CH,038H,030H,030H,030H,01CH,00FH,007H,000H,000H,000H

NOVE_LCD DB 2,3
	 	DB 000H,000H,000H,0E0H,0F0H,038H,01CH,00CH,00CH,01CH,038H,0F0H,0C0H,000H,000H,000H
		DB 000H,000H,000H,00FH,01FH,038H,070H,060H,060H,030H,038H,0FFH,0FFH,000H,000H,000H
		DB 000H,000H,000H,006H,01EH,038H,030H,030H,030H,018H,01EH,007H,001H,000H,000H,000H

.STACK

MINHA_PILHA DW 128 DUP(?)

END
